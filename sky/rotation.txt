// rotation method

// give a status of block; four directions 0,1,2,3
// which means 0， 90， 180， 270 degree

// sort them after each rotation to make sure this works


// here is clockwise
void rot_cw();
// for I

// for J
void Jblock::rot_cw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[2].x -= 1;
        temp[3].x -= 1;
        temp[2].y -= 2;
        temp[3].y -= 2;
    } else if (curStatus == 1) {
        temp[0].y += 1;
        temp[1].y += 1;
        temp[2].x += 2;
        temp[3].x += 2;
    } else if (curStatus == 2) {
        temp[0].y += 1;
        temp[1].y += 1;
        temp[2].x -= 1;
        temp[3].x -= 1;
        temp[2].y -= 1;
        temp[3].y -= 1;
    } else {
        temp[2].x += 1;
        temp[3].x += 1;
        temp[0].y += 1;
        temp[1].y += 1;
        temp[0].x -= 1;
        temp[1].x -= 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 1) % 4;
        void blockPointsSort();
    }
}

// for T
void Tblock::rot_cw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[2].x -= 1;
        temp[2].y -= 1;
    } else if (curStatus == 1) {
        temp[0].x += 1;
        temp[0].y += 2;
        temp[1].y += 1;
    } else if (curStatus == 2) {
        temp[2].x -= 1;
        temp[2].y -= 1;
        temp[3].x -= 2;
        temp[3].y -= 2;
    } else {
        temp[3].x += 1;
        temp[0].x += 2;
        temp[0].y += 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 1) % 4;
    }
}

// for S
void Sblock::rot_cw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[1].x -= 2;
        temp[1].y -= 1;
        temp[2].y -= 1;
    } else if (curStatus == 1) {
        temp[0].x += 2;
        temp[0].y += 1;
        temp[1].y += 1;
    } else if (curStatus == 2) {
        temp[1].x -= 2;
        temp[1].y -= 1;
        temp[2].y -= 1;
    } else {
        temp[0].x += 2;
        temp[0].y += 1;
        temp[1].y += 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 1) % 4;
    }
}

// for Z
void Zblock::rot_cw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[2].x -= 1;
        temp[3].x -= 1;
        temp[3].y -= 2;
    } else if (curStatus == 1) {
        temp[0].x += 1;
        temp[0].y += 2;
        temp[3].x += 1;
    } else if (curStatus == 2) {
        temp[2].x -= 1;
        temp[3].x -= 1;
        temp[3].y -= 2;
    } else {
        temp[0].x += 1;
        temp[0].y += 2;
        temp[3].x += 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 1) % 4;
    }
}

// for O
void Oblock::rot_cw() {}

// for L
void Lblock::rot_cw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[0].y -= 1;
        temp[3].y -= 1;
        temp[0].x -= 2;
        temp[3].x -= 2;
    } else if (curStatus == 1) {
        temp[0].y += 1;
        temp[3].y -= 1;
        temp[0].x += 2;
    } else if (curStatus == 2) {
        temp[0].y -= 1;
        temp[2].x -= 1;
        temp[2].y -= 1;
        temp[3].x += 1;
    } else {
        temp[0].y += 2;
        temp[2].x += 1;
        temp[1].x += 1;
        temp[1].y += 2;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 1) % 4;
    }
}

// here is counter-clockwise
void rot_ccw();
// for I
void Iblock::rot_ccw() {
    rot_cw();
}

// for J
void Jblock::rot_ccw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[0].x += 1;
        temp[3].y -= 2;
        temp[3].x -= 1;
    } else if (curStatus == 1) {
        temp[1].y += 2;
        temp[0].x += 2;
        temp[0].y += 2;
    } else if (curStatus == 2) {
        temp[0].y -= 1;
        temp[1].y -= 1;
        temp[2].x -= 2;
        temp[3].x -= 2;
    } else {
        temp[2].y -= 1;
        temp[3].y -= 1;
        temp[0].x += 1;
        temp[0].y += 1;
        temp[1].x += 1;
        temp[1].y += 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 3) % 4;
    }
}

// for T
void Tblock::rot_ccw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[3].x -= 1;
        temp[2].x -= 2;
        temp[2].y -= 1;
    } else if (curStatus == 1) {
        temp[0].x += 1;
        temp[0].y += 1;
    } else if (curStatus == 2) {
        temp[1].y -= 1;
        temp[3].x -= 1;
        temp[3].y -= 2;
    } else {
        temp[0].x += 2;
        temp[0].y += 2;
        temp[1].x += 1;
        temp[1].y += 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 3) % 4;
    }
}

// for S
void Sblock::rot_ccw() {
    rot_cw();
}

// for Z
void Zblock::rot_ccw() {
    rot_cw();
}

// for O
void Oblock::rot_ccw() {}

// for L
void Lblock::rot_ccw() {
    std::vector<Posn> temp;
    temp.clear();
    for (int a = 0; a < 4; a++) {
        temp.emplace_back(points[a]);
    }
    if (curStatus == 0) {
        temp[1].y -= 2;
        temp[2].y -= 2;
        temp[0].x -= 1;
        temp[3].x -= 1;
    } else if (curStatus == 1) {
        temp[0].x += 2;
        temp[0].y += 2;
        temp[1].x += 2;
    } else if (curStatus == 2) {
        temp[1].y += 1;
        temp[2].x -= 2;
        temp[2].y -= 1;
    } else {
        temp[0].y -= 1;
        temp[3].x -= 1;
        temp[1].x += 1;
        temp[1].y += 1;
    }
    if (checkTemp(temp) == true) {
        this->points = temp;
        this->curStatus = (curStatus + 3) % 4;
    }
}

